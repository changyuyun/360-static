"use strict";
require('qhgame-adapter');
/**
 * 声明一个js文件
 * fileName是文件路径加名字
 * callback是一个 function (require, module, exports, process) {/content/}) content位置是函数的所有内容
 * 在require之后，该方法将被执行
 * @param {*} fileName
 * @param {*} callback
 */
self.define = function define(fileName, callback) {
    defineMap[fileName] = {
        fileName: fileName,
        callback: callback,
        loaded: false
    };
};
/**
 * 声明所有js文件的位置8
 * 包括
 * fileName:string
 * callback: function (require, module, exports, process) {/content/});
 * exports:{}需要导出的模块
 * loaded:boolean 是否已经运行加载过
 *
 */
var defineMap = {};
var requireGroup = [];
function seGameRequire(filePath) {
    console.log("require  filePath" + filePath);
    if (filePath.indexOf('.js') <= 0) {
        filePath += '.js';
    }
    if (typeof filePath != 'string') {
        throw new Error('require args must be a string');
    }
    var nowFilePath = requireGroup.join('/') + '/' + filePath;
    var absolutePathArr = getAbsolutePathArr(nowFilePath);
    if (!absolutePathArr) {
        //该地址不存在
        while (!absolutePathArr && filePath.indexOf('../') >= 0) {
            filePath = filePath.replace('../', '/');
            nowFilePath = requireGroup.join('/') + '/' + filePath;
            absolutePathArr = getAbsolutePathArr(nowFilePath);
        }
        if (!absolutePathArr) {
            throw new Error("modules \"" + filePath + "\" is not defined  1");
        }
    }
    var absolutePath = absolutePathArr.join('/').replace('./', '/');
    var defineObj = defineMap[absolutePath];
    if (!defineObj) {
        //该文件不存在
        throw new Error("modules \"" + absolutePath + "\" is not defined  2");
    }
    if (defineObj.loaded == false) {
        var dirArr = getCurrentDir(filePath);
        requireGroup = requireGroup.concat(dirArr);
        var callback = defineObj.callback;
        var funcModule = {
            exports: {}
        };
        defineObj.loaded = true;
        var result = callback(seGameRequire, funcModule, funcModule.exports);
        for (var i = dirArr.length - 1; i >= 0; i--) {
            var item = dirArr[i];
            if (requireGroup[requireGroup.length - 1] == item) {
                requireGroup.splice(requireGroup.length - 1, 1);
            }
        }
        defineObj.exports =
            funcModule.exports == undefined ? result : funcModule.exports;
    }
    return defineObj.exports;
}
/**
 * 拿到一个文件的相对地址，然后解析成绝对地址的string组
 * @param {*} pathFile
 */
function getAbsolutePathArr(pathFile) {
    var result = [];
    var arr = pathFile.split('/');
    var length = arr.length;
    for (var i = 0; i < length; i++) {
        var item = arr[i];
        if ('' != item && '.' != item) {
            if ('..' == item) {
                if (0 == result.length) {
                    result = null;
                    break;
                }
                result.pop();
            }
            else
                i + 1 < i && '..' == arr[i + 1] ? i++ : result.push(item);
        }
    }
    return result;
}
/**
 * 获取当前文件夹的文件目录，如果是根目录则为./
 */
function getCurrentDir(pathFile) {
    var pathArr = pathFile.split('/');
    if (pathArr.length <= 1) {
        return ['./'];
    }
    pathArr.pop();
    return pathArr;
}
//# sourceMappingURL=header.js.map