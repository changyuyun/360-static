"use strict";
var _a = require('loader-utils'), stringifyRequest = _a.stringifyRequest, urlToRequest = _a.urlToRequest;
var fse = require('fs-extra');
var path = require('path');
var template = require('./template');
var relativeToCwd = require('./path').relativeToCwd;
var ROUTER_CONFIG_CONTAINER = require('./constant').ROUTER_CONFIG_CONTAINER;
function importModule(paths, context) {
    if (paths === void 0) { paths = []; }
    return paths
        .map(function (pathItem) {
        context.addDependency(pathItem);
        pathItem = stringifyRequest(context, urlToRequest(pathItem));
        return "import " + pathItem + ";";
    })
        .join('');
}
exports.importInit = function (inits) {
    return importModule(inits, this);
};
exports.validAppJsonContent = function (appJson) {
    if (appJson === void 0) { appJson = {}; }
    if (typeof appJson === 'string')
        appJson = JSON.parse(appJson);
    var _a = appJson.pages, pages = _a === void 0 ? [] : _a;
    pages.filter(function (page) { return exports.checkPath(page); });
    return !pages.length;
};
exports.checkPath = function (path) {
    return /^(\.|\/|\\)/.test(path);
};
exports.getRouterConfigInfo = function (pageMap, fileTypeMap) {
    var router = "/" + pageMap.page;
    var importSourcePath = urlToRequest(pageMap.page);
    var formatPath = function (path, ext) { return path + "." + ext; };
    return {
        router: router,
        component: ROUTER_CONFIG_CONTAINER + "['" + formatPath(router, fileTypeMap.script) + "']",
        meta: ROUTER_CONFIG_CONTAINER + "['" + formatPath(router, fileTypeMap.config) + "']",
        config: ROUTER_CONFIG_CONTAINER + "['" + formatPath(router, fileTypeMap.config) + "']",
        script: ROUTER_CONFIG_CONTAINER + "['" + formatPath(router, fileTypeMap.script) + "']",
        configPath: formatPath(importSourcePath, fileTypeMap.config),
        scriptPath: formatPath(importSourcePath, fileTypeMap.script)
    };
};
exports.ensureFile = function (pagePath, ext) {
    // 创建 pages 模板
    var fileTemplate = {
        '.js': template.js,
        '.html': template.html,
        '.css': template.css,
        '.less': template.css,
        '.scss': template.css,
        '.json': template.json
    };
    var file = "" + pagePath + ext;
    var fileInTemplate = path.relative(relativeToCwd(''), file);
    if (!fse.existsSync(file)) {
        fse.outputFileSync(file, fileTemplate[ext](fileInTemplate));
    }
};
exports.findPageGroup = function (pagePath, fileTypeObj, autoTouch) {
    if (autoTouch === void 0) { autoTouch = true; }
    var pageGroup;
    var pageItem = {
        page: pagePath,
        script: false,
        template: false,
        style: false,
        config: false
    };
    pagePath = relativeToCwd(pagePath);
    var parsedPagePath = path.parse(pagePath);
    var extArr = Object.values(fileTypeObj).map(function (type) { return "." + type; }) || [];
    if (fse.existsSync("" + pagePath + extArr[0])) {
        pageGroup = fse
            .readdirSync(parsedPagePath.dir)
            .filter(function (dirfile) { return extArr.indexOf(path.parse(dirfile).ext) !== -1; });
    }
    else {
        pageGroup = extArr.map(function (ext) {
            if (autoTouch)
                exports.ensureFile(pagePath, ext);
            return "" + parsedPagePath.base + ext;
        });
    }
    // pageItem.group = pageGroup;
    pageGroup.forEach(function (page) {
        switch (extArr.indexOf(path.parse(page).ext)) {
            case 0:
                pageItem.template = true;
                break;
            case 1:
                pageItem.script = true;
                break;
            case 2:
                pageItem.style = true;
                break;
            case 3:
                pageItem.config = true;
                break;
        }
    });
    return pageItem;
};
exports.isAssignNode = function (node, parent, name) {
    return parent &&
        parent.type === 'Program' &&
        node.type === 'ExpressionStatement' &&
        node.expression.callee &&
        node.expression.callee.name === name;
};
exports.readFile = function (filePath) {
    return new Promise(function (resolver, reject) {
        fse.readFile(filePath, function (err, content) {
            if (err) {
                reject(err);
            }
            else {
                resolver(content.toString());
            }
        });
    });
};
exports.strMapToObj = function (strMap) {
    var obj = Object.create(null);
    for (var _i = 0, strMap_1 = strMap; _i < strMap_1.length; _i++) {
        var _a = strMap_1[_i], k = _a[0], v = _a[1];
        obj[k] = v;
    }
    return obj;
};
exports.getPageFileTypeMap = function () {
    return {
        template: 'html',
        script: 'js',
        style: ensureCSSPreprocessor(),
        config: 'json'
    };
    function ensureCSSPreprocessor() {
        var cssPreprocessor = ['css', 'less', 'scss'];
        return cssPreprocessor.reduce(function (preprocessor, matcher) {
            return fse.existsSync(relativeToCwd("app." + matcher))
                ? matcher
                : preprocessor;
        }, cssPreprocessor[0]);
    }
};
//# sourceMappingURL=util.js.map