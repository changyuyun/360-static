"use strict";
var tslib_1 = require("tslib");
var _a = require('../helper/path'), relativeToSrc = _a.relativeToSrc, relativeToCwd = _a.relativeToCwd;
var getPageFileTypeMap = require('../helper/util').getPageFileTypeMap;
var path = require('path');
var babelConfig = require('./babel');
var limit = 8192;
var webpackConfig = (module.exports = new (require('webpack-chain'))());
/**
 * proxy object methods
 * @param {{}} target
 * @param {[]} keys
 * @param {() => {}} callback
 */
function proxy(target, keys, callback) {
    var key = [].concat(keys)[0];
    key.split(',').forEach(function (key) {
        var handler = target[key];
        target[key] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            args = (callback && callback.apply(void 0, tslib_1.__spreadArrays([key], args))) || args;
            target = handler.apply(this, args);
            return keys.length > 1 ? proxy(target, keys.slice(1), callback) : target;
        };
    });
    return target;
}
// // process for example
// if (process.env.NODE_MODE === 'demo') {
//   proxy(
//     webpackConfig.module,
//     ['rule', 'test,resource', 'use', 'loader'],
//     function(key, loader) {
//       if (key !== 'loader') return
//       if (/^\w/.test(loader)) {
//         return ['@qihoo/seapp-builder/node_modules/' + loader]
//       }
//     }
//   )
// }
function getAssetPath(dir) {
    return dir + "/[name].[ext]?[hash]";
}
function getFileLoaderOptions(dir) {
    return {
        name: function () {
            return getAssetPath(dir);
        }
    };
}
function getUrlLoaderOptions(dir) {
    return {
        limit: limit,
        fallback: {
            loader: 'file-loader',
            options: getFileLoaderOptions(dir)
        }
    };
}
webpackConfig.resolve.alias
    .set('@', relativeToCwd(''))
    .end()
    .extensions.add('.js')
    .add('.json')
    .add('.vue');
webpackConfig
    .plugin('preset-config-plugin')
    .use(require('../plugins/PresetConfigPlugin'), [
    [
        {
            name: '$appConfig',
            file: './app.json'
        },
        {
            name: '$pageFileType',
            content: getPageFileTypeMap()
        }
    ]
])
    .end()
    .plugin('config-resolve-plugin')
    .use(require('../plugins/ConfigResolverPlugin'))
    .end()
    .plugin('progress-plugin')
    .use(require('webpack').ProgressPlugin)
    .end()
    .plugin('vue-loader/lib/plugin')
    .use(require.resolve('vue-loader/lib/plugin'));
// script
webpackConfig.module
    .rule('compile')
    .test(/\.js$/)
    .use('cache-loader')
    .loader('cache-loader')
    .end()
    .use('babel-loader')
    .loader('babel-loader')
    .options(babelConfig)
    .end()
    .use('merge-file')
    .loader(relativeToSrc('loaders/merge-file.js'));
// entry
webpackConfig.module
    .rule('app')
    .resource(relativeToCwd('app.js'))
    .use('loader')
    .loader(relativeToSrc('loaders/loader.js'))
    .end();
// style
webpackConfig.module
    .rule('style')
    .test(/\.(css|less|scss)$/)
    .use('mini-css-extract-plugin')
    .loader(require('mini-css-extract-plugin').loader)
    .options({})
    .end()
    .use('css-loader')
    .loader('css-loader')
    .end()
    .end()
    .rule('less')
    .test(/\.less$/)
    .use('less-loader')
    .loader('less-loader')
    .end()
    .end()
    .rule('sass')
    .test(/\.scss$/)
    .use('sass-loader')
    .loader('sass-loader')
    .end()
    .end();
webpackConfig
    .plugin('mini-css-extract-plugin')
    .use(require('mini-css-extract-plugin'), [
    {
        filename: 'app.css'
    }
]);
// component
webpackConfig.module
    .rule('vue')
    .test(/\.vue$/)
    .use('cache-loader')
    .loader('cache-loader')
    .end()
    .use('vue-loader')
    .loader('vue-loader');
// media
webpackConfig.module
    .rule('image')
    .test(/\.(png|jpe?g|gif|webp)(\?.*)?$/)
    .use('file-loader')
    .loader('file-loader')
    .options(getFileLoaderOptions('img'));
webpackConfig.module
    .rule('media')
    .test(/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/)
    .use('url-loader')
    .loader('url-loader')
    .options(getUrlLoaderOptions('media'));
webpackConfig.module
    .rule('fonts')
    .test(/\.(woff2?|eot|ttf|otf)(\?.*)?$/i)
    .use('url-loader')
    .loader('url-loader')
    .options(getUrlLoaderOptions('fonts'));
//# sourceMappingURL=base.js.map