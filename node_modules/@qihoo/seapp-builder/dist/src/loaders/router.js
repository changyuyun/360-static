"use strict";
var tslib_1 = require("tslib");
var _ = require('lodash');
var parse = require('@babel/parser').parse;
var traverse = require('@babel/traverse').default;
var generate = require('@babel/generator').default;
var jsonLoader = require('json-loader');
var _a = require('../helper/util'), getRouterConfigInfo = _a.getRouterConfigInfo, validAppJsonContent = _a.validAppJsonContent, findPageGroup = _a.findPageGroup;
var _b = require('./builder-model'), varDeclarationContainerBuilder = _b.varDeclarationContainerBuilder, replacePageNode = _b.replacePageNode, reBuildAppConfig = _b.reBuildAppConfig, importBuilder = _b.importBuilder;
var ROUTER_CONFIG_CONTAINER = require('../helper/constant').ROUTER_CONFIG_CONTAINER;
function ensurePageNode(node, parent) {
    if (parent &&
        parent.type === 'AssignmentExpression' &&
        node.type === 'ObjectExpression') {
        var pagesAst = node.properties.filter(function (prop) { return prop.key.value === 'pages'; });
        pagesAst = pagesAst[pagesAst.length - 1];
        pagesAst.value.elements.forEach(function (page, index) {
            page._isPage = true;
            page._isFirstPage = !index;
            return page;
        });
    }
}
function importInjections(pageConfig, context) {
    return _(pageConfig)
        .map(function (page) {
        var routerConfig = getRouterConfigInfo(page, context.$preset.get('$pageFileType'));
        var injectionModules = [];
        routerConfig.injectPath && context.addDependency(routerConfig.injectPath);
        if (page.script) {
            injectionModules.push(importBuilder(routerConfig.script, routerConfig.scriptPath));
        }
        if (page.config) {
            injectionModules.push(importBuilder(routerConfig.config, routerConfig.configPath, false));
        }
        return injectionModules;
    })
        .flatten()
        .unshift(varDeclarationContainerBuilder(ROUTER_CONFIG_CONTAINER))
        .value();
}
module.exports = function (source, map) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var that, appConfig, pageFileType, program, pageGroupMapByPage, pageGroup;
        return tslib_1.__generator(this, function (_a) {
            if (this.cacheable)
                this.cacheable();
            that = this;
            appConfig = JSON.parse(source);
            pageFileType = that.$preset.get('$pageFileType');
            program = parse(jsonLoader(source), { sourceType: 'module' });
            // 解析
            traverse(program, {
                enter: function (path) {
                    ensurePageNode(path.node, path.parentPath);
                }
            });
            if (validAppJsonContent(appConfig)) {
                throw new Error('pages 配置错误，不能以.|\\|/ 开头。');
            }
            pageGroupMapByPage = new Map();
            pageGroup = appConfig.pages.map(function (page) {
                var pageGroup = findPageGroup(page, Object.values(pageFileType));
                pageGroupMapByPage.set(page, pageGroup);
                return pageGroup;
            });
            traverse(program, {
                enter: function (path) {
                    if (path.node._isPage) {
                        path.replaceWith(replacePageNode(path.node, path.parentPath.node, pageGroupMapByPage, pageFileType));
                    }
                }
            });
            program.program.body = importInjections(pageGroup, that).concat(reBuildAppConfig(program).body);
            return [2 /*return*/, generate(program).code];
        });
    });
};
//# sourceMappingURL=router.js.map