"use strict";
var tslib_1 = require("tslib");
var fs = require('fs');
var generator = require('@babel/generator').default;
var parse = require('@babel/parser').parse;
var traverse = require('@babel/traverse').default;
var relativeToCwd = require('../helper/path').relativeToCwd;
var _a = require('../helper/util'), isAssignNode = _a.isAssignNode, checkPath = _a.checkPath;
var _b = require('./builder-model'), objectAssignBuilder = _b.objectAssignBuilder, appTemplateBuilder = _b.appTemplateBuilder, storeBuilder = _b.storeBuilder, communicateToComponentBuilder = _b.communicateToComponentBuilder;
var loadRouter = require('./router');
function isExitFile(file) {
    return fs.existsSync(relativeToCwd(file));
}
module.exports = function (source, map) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var that, appConfig, pageFileTypeMap, storePath, isRequireStore, program, mainStylePath, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (this.cacheable)
                        this.cacheable();
                    that = this;
                    that.addDependency(relativeToCwd('app.json'));
                    appConfig = that.$preset.get('$appConfig');
                    pageFileTypeMap = that.$preset.get('$pageFileType');
                    storePath = JSON.parse(appConfig).store;
                    isRequireStore = storePath && isExitFile(storePath);
                    program = parse(source, { sourceType: 'module' });
                    traverse(program, {
                        enter: function (path) {
                            if (isAssignNode(path.node, path.parentPath, 'App')) {
                                var result = communicateToComponentBuilder(generator(objectAssignBuilder(appTemplateBuilder(), path.node.expression)).code, isRequireStore);
                                path.replaceWith(parse(result, { sourceType: 'module' }));
                            }
                        }
                    });
                    if (storePath && checkPath(storePath)) {
                        throw new Error('store 配置错误，不能以.|\\|/ 开头。');
                    }
                    if (storePath && !isExitFile(storePath)) {
                        throw new Error("store at " + storePath + " is not found");
                    }
                    mainStylePath = "app." + pageFileTypeMap.style;
                    _a = "\n    " + (isExitFile(mainStylePath) ? "import './" + mainStylePath + "'" : '') + "\n    " + (isRequireStore ? storeBuilder(storePath) : '') + "\n    ";
                    return [4 /*yield*/, loadRouter.call(that, appConfig)];
                case 1: return [2 /*return*/, _a + (_b.sent()) + "\n    " + generator(program).code + "\n  "];
            }
        });
    });
};
//# sourceMappingURL=loader.js.map