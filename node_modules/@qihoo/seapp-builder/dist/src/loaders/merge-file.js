"use strict";
var tslib_1 = require("tslib");
var urlToRequest = require('loader-utils').urlToRequest;
var parse = require('@babel/parser').parse;
var generate = require('@babel/generator').default;
var traverse = require('@babel/traverse').default;
var t = require('@babel/types');
var vueLoader = require('vue-loader');
var findPageGroup = require('../helper/util').findPageGroup;
var relativeToCwd = require('../helper/path').relativeToCwd;
var vueBuilder = require('./builder-model').vueBuilder;
function decodePagePath(pagePath) {
    if (typeof pagePath !== 'string')
        return false;
    pagePath = urlToRequest(pagePath);
    var flag = pagePath.lastIndexOf('/');
    var pathName = pagePath.substring(0, flag);
    var fileName = pagePath.substring(flag + 1);
    if (flag < 0) {
        pathName = './';
        fileName = pagePath;
    }
    return {
        pagePath: pagePath,
        pathName: pathName,
        fileName: fileName
    };
}
function getMatchedPagePath(pages, context) {
    var pageFileTypeObj = context.$preset.get('$pageFileType');
    pages = pages.filter(function (pagePath) {
        return relativeToCwd(pagePath + "." + pageFileTypeObj.script) ===
            context.resourcePath;
    });
    return pages[0];
}
module.exports = function (source) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var that, appConfig, pageFileTypeObj, pageExtMap, pages, result, matchedPagePath, tree, pageGroup, vueBuilderParam;
        return tslib_1.__generator(this, function (_a) {
            if (this.cacheable)
                this.cacheable();
            that = this;
            appConfig = JSON.parse(that.$preset.get('$appConfig'));
            pageFileTypeObj = that.$preset.get('$pageFileType');
            pageExtMap = new Map(Object.entries(pageFileTypeObj).map(function (entries) { return [
                entries[0],
                "." + entries[1]
            ]; }));
            pages = appConfig.pages || [];
            result = "\n    " + source + "\n  ";
            matchedPagePath = getMatchedPagePath(pages, that);
            if (matchedPagePath) {
                tree = parse(source, {
                    sourceType: 'module',
                    plugins: []
                });
                pageGroup = findPageGroup(matchedPagePath, pageFileTypeObj);
                traverse(tree, {
                    ExpressionStatement: function (path) {
                        // choose Page expression statement
                        if (path.parentPath.isProgram() &&
                            path
                                .get('expression')
                                .get('callee')
                                .isIdentifier({ name: 'Page' })) {
                            path.replaceWith(t.exportDefaultDeclaration(path.get('expression').node));
                        }
                    }
                });
                vueBuilderParam = {
                    template: pageGroup.template
                        ? urlToRequest(decodePagePath(matchedPagePath).fileName +
                            pageExtMap.get('template'), that)
                        : '',
                    script: pageGroup.script ? generate(tree, {}, source).code : '',
                    style: pageGroup.style
                        ? urlToRequest(decodePagePath(matchedPagePath).fileName + pageExtMap.get('style'), that)
                        : ''
                };
                result = "" + vueLoader.call(that, vueBuilder(vueBuilderParam));
            }
            return [2 /*return*/, result];
        });
    });
};
//# sourceMappingURL=merge-file.js.map