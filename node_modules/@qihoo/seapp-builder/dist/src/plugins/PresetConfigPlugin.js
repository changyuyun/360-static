"use strict";
var fs = require('fs-extra');
var PresetConfigPlugin = /** @class */ (function () {
    function PresetConfigPlugin(options) {
        // String
        this.name = 'PresetConfigPlugin';
        /**
         * Object | [ Object ]
         * name: String
         * file: Path
         */
        this.options = options;
        // Boolean
        this.debug = false;
        // 格式化 options
        this.formatedOptions = this.formatOptions(options);
    }
    PresetConfigPlugin.prototype.log = function (info) {
        if (info === void 0) { info = ''; }
        if (this.debug)
            console.log(info);
    };
    PresetConfigPlugin.prototype.apply = function (compiler) {
        var that = this;
        var compilerPlugin = null;
        var compilationPlugin = null;
        var run = that.run, watchRun = that.watchRun, compilation = that.compilation;
        if (compiler.hooks) {
            compilerPlugin = function (hooks) {
                for (var _i = 0, _a = Object.entries(hooks); _i < _a.length; _i++) {
                    var hook = _a[_i];
                    var hookName = hook[0];
                    var hookTap = hook[1].bind(that);
                    compiler.hooks[hookName].tap('PresetConfigPlugin', hookTap);
                }
            };
            compilationPlugin = function (compilation, hooks) {
                for (var _i = 0, _a = Object.entries(hooks); _i < _a.length; _i++) {
                    var hook = _a[_i];
                    var hookName = hook[0];
                    var hookTap = hook[1].bind(that);
                    compilation.hooks[hookName].tap('PresetConfigPlugin', hookTap);
                }
            };
        }
        else {
            compilerPlugin = function (fn) {
                compiler.plugin('emit', fn);
            };
            compilationPlugin = function (compilation, fn) {
                compilation.plugin();
            };
        }
        that.compilerPlugin = compilerPlugin;
        that.compilationPlugin = compilationPlugin;
        compilerPlugin({
            run: run,
            watchRun: watchRun,
            compilation: compilation
        });
    };
    PresetConfigPlugin.prototype.formatOptions = function (options) {
        options = options || this.options;
        // options 仅支持 object | [ object ]
        if (Object.prototype.toString.call(options) === '[object Object]') {
            return [options];
        }
        if (Object.prototype.toString.call(options) === '[object Array]') {
            return options;
        }
        return [];
    };
    PresetConfigPlugin.prototype.resolveOptions = function () {
        var preset = new Map();
        this.log(this.formatedOptions);
        this.formatedOptions.forEach(function (option) {
            var name = option.name, file = option.file;
            var content = option.content;
            // 如果 content 存在 则不会去读取 file
            content = content || fs.readFileSync(file, 'utf-8');
            preset.set(name, content);
        });
        return preset;
    };
    PresetConfigPlugin.prototype._normalModuleLoader = function (loaderContext, module) {
        // 给 loaderContext 赋值
        loaderContext.$preset = this.$preset || {};
    };
    PresetConfigPlugin.prototype.watchRun = function (compiler) {
        this.$preset = this.resolveOptions();
        this.log('watchRun');
    };
    PresetConfigPlugin.prototype.run = function (compiler) {
        this.$preset = this.resolveOptions();
        this.log('run');
    };
    PresetConfigPlugin.prototype.compilation = function (compilation, compilationParams) {
        // FIXME: 该 hooks 将在v5中遗弃
        compilation.hooks.normalModuleLoader.tap(this.name, this._normalModuleLoader.bind(this));
        this.log('compilation');
    };
    return PresetConfigPlugin;
}());
module.exports = PresetConfigPlugin;
//# sourceMappingURL=PresetConfigPlugin.js.map