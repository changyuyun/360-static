"use strict";
var path = require('path');
var fs = require('fs-extra');
var relativeToCwd = require('../helper/path').relativeToCwd;
var APP_CONFIG = require('../helper/constant').APP_CONFIG;
var ConfigResolverPlugin = /** @class */ (function () {
    function ConfigResolverPlugin() {
        this.parsedPages = "";
    }
    Object.defineProperty(ConfigResolverPlugin.prototype, "context", {
        get: function () {
            return process.cwd();
        },
        enumerable: true,
        configurable: true
    });
    ConfigResolverPlugin.prototype.resetAppConfig = function () {
        var appJsonPath = path.relative(process.cwd(), path.join(process.cwd(), "" + APP_CONFIG));
        var appConfig = fs.readFileSync(appJsonPath);
        this.appConfig = JSON.parse(appConfig.toString());
        this.pagesConfig = [];
        this.pages = this.appConfig.pages;
        this.configPages = this.resolvePages().map(this.formatPath);
    };
    ConfigResolverPlugin.prototype.resolvePages = function () {
        return this.pages.map(relativeToCwd);
    };
    ConfigResolverPlugin.prototype.formatPath = function (page) {
        var result = path.format({
            dir: path.dirname(page),
            name: path.parse(page).base,
            ext: '.json'
        });
        return result;
    };
    ConfigResolverPlugin.prototype.getPageConfig = function (module, index) {
        this.pagesConfig[index] = module
            ? module._source
                ? module._source._value
                : "{}"
            : "{}";
    };
    ConfigResolverPlugin.prototype.emitFile = function (compilation, fileContent) {
        var newFileName = 'app.json';
        compilation.assets[newFileName] = {
            source: function () { return fileContent; },
            size: function () { return Buffer.byteLength(fileContent, 'utf-8'); }
        };
    };
    ConfigResolverPlugin.prototype.apply = function (compiler) {
        var that = this;
        var compilerPlugin = null;
        var compilationPlugin = null;
        if (compiler.hooks) {
            compilerPlugin = function (obj) {
                for (var _i = 0, _a = Object.entries(obj); _i < _a.length; _i++) {
                    var hook = _a[_i];
                    compiler.hooks[hook[0]].tap('ConfigResolverPlugin', hook[1].bind(that));
                }
            };
            compilationPlugin = function (compilation, fn) {
                compilation.hooks.moduleIds.tap('ConfigResolverPlugin', fn);
            };
        }
        else {
            compilerPlugin = function (fn) {
                compiler.plugin('emit', fn);
            };
        }
        that.compilerPlugin = compilerPlugin;
        that.compilationPlugin = compilationPlugin;
        var emit = that.emit, run = that.run, watchRun = that.watchRun;
        compilerPlugin({
            emit: emit,
            watchRun: watchRun,
            run: run
        });
    };
    ConfigResolverPlugin.prototype.emit = function (compilation) {
        var that = this;
        compilation.chunks.forEach(function (chunk) {
            Array.from(chunk.modulesIterable, function (module) {
                var index = that.configPages.indexOf(module.resource);
                if (index >= 0) {
                    that.getPageConfig(module, index);
                }
            });
            that.appConfig.pages = that.pagesConfig.map(function (page, index) {
                return {
                    route: that.pages[index],
                    window: JSON.parse(page)
                };
            });
            that.emitFile(compilation, JSON.stringify(that.appConfig, null, 2));
        });
    };
    ConfigResolverPlugin.prototype.watchRun = function (compiler) {
        this.resetAppConfig();
    };
    ConfigResolverPlugin.prototype.run = function (compiler) {
        this.resetAppConfig();
    };
    return ConfigResolverPlugin;
}());
module.exports = ConfigResolverPlugin;
//# sourceMappingURL=ConfigResolverPlugin.js.map